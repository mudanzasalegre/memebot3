# ╔════════════════════════════════════════════════════════════════════╗
# ║                   MemeBot 3 – DATA ACQUISITION (.env)              ║
# ╚════════════════════════════════════════════════════════════════════╝

# ───────── Modo / Logging / Zona horaria ─────────
DRY_RUN=1                     # 1 = paper trading (recom. para adquisición)
LOG_LEVEL=DEBUG               # o INFO si prefieres menos ruido
LOCAL_TZ=Europe/Madrid

# ───────── Rutas (deja vacías para defaults relativos ./data, ./logs, ./ml) ─────────
FEATURES_DIR=
LOG_PATH=
MODEL_PATH=ml/model.pkl

# ───────── Base de datos ─────────
# (puede ser ruta absoluta o relativa a /data/)
SQLITE_DB=data/memebotdatabase.db

# ───────── Wallet / listas / RPC (sin claves en data acquisition) ─────────
SOL_PRIVATE_KEY=
SOL_PUBLIC_KEY=
SOL_RPC_URL=https://api.mainnet-beta.solana.com

# ───────── URLs base ─────────
DEX_API_BASE=https://api.dexscreener.com
PUMPFUN_API_BASE=
RUGCHECK_API_BASE=https://api.rugcheck.xyz/v1
HELIUS_API_BASE=https://api.helius.xyz
HELIUS_RPC_URL=https://mainnet.helius-rpc.com/?api-key=your-api-key
GMGN_API_BASE=https://api.gmgn.ai
GECKO_API_URL=https://api.geckoterminal.com/api/v2

# ───────── API keys ─────────
BITQUERY_TOKEN=
RUGCHECK_API_KEY=
GMGN_API_KEY=
HELIUS_API_KEY=
BIRDEYE_API_KEY=

# (Opcional) Credenciales OAuth Bitquery, si usas otro flujo
BQ_CLIENT_ID=
BQ_CLIENT_SECRET=

# ╔════════════════════════════════════════════════════════════════════╗
# ║                       Descubrimiento & Timings                     ║
# ╚════════════════════════════════════════════════════════════════════╝
SLEEP_SECONDS=8               # sleep principal del loop
DISCOVERY_INTERVAL=90         # cada cuánto refrescar descubrimiento
VALIDATION_BATCH_SIZE=24      # cuántos pares validar por ciclo
MAX_CANDIDATES=50
MAX_QUEUE_SIZE=250

# Re-queues / reintentos
MAX_RETRIES=5
INCOMPLETE_RETRIES=3

# Monitor: nº máx. de consultas “críticas” (ignoran caché negativa)
CRIT_PRICE_MAX_PER_CYCLE=8
# Ventana de bootstrap (min) tras BUY con sonda más agresiva
CRIT_BOOTSTRAP_MIN=20

# Retrain (en UTC): día 0=lun … 6=dom
RETRAIN_DAY=3
RETRAIN_HOUR=4

# ╔════════════════════════════════════════════════════════════════════╗
# ║              Monitor / Shadow-Sim                                  ║
# ╚════════════════════════════════════════════════════════════════════╝
FORCE_JUP_IN_MONITOR=false      # true = forzar siempre Jupiter en monitor, aunque compra fuese non-JUP
REAL_SHADOW_SIM=false           # true = simular posiciones shadow en modo real (dataset extra)

# ╔════════════════════════════════════════════════════════════════════╗
# ║                  Ventanas horarias (24/7 en acquisition)           ║
# ╚════════════════════════════════════════════════════════════════════╝
# Si estos quedan vacíos ⇒ 24/7 (sin gate horario)
TRADING_HOURS=
TRADING_HOURS_EXTRA=
USE_EXTRA_HOURS=false
# Bloqueos explícitos por hora (coma-separado, ej. "17,3,4-5"); vacío ⇒ no bloquea
BLOCK_HOURS=

# ╔════════════════════════════════════════════════════════════════════╗
# ║                  IA / Entrenamiento y Umbral                       ║
# ╚════════════════════════════════════════════════════════════════════╝
TRAIN_FORWARD_HOLDOUT_DAYS=3    # nº de días recientes reservados como hold-out temporal
TRAIN_FORWARD_HOLDOUT_PCT=0.0   # % de datos reservados como hold-out (0.0 = ignora, usar DAYS)
TRAINING_WINDOW_DAYS=28         # ventana móvil de entrenamiento (ej. últimos 28 días)
MIN_THRESHOLD_CHANGE=0.01       # cambio mínimo (en puntos porcentuales) para actualizar AI_THRESHOLD
AI_THRESHOLD_FILE=data/metrics/recommended_threshold.json  # ruta del threshold dinámico recomendado
AI_THRESHOLD=0.0                # en acquisition no filtramos por IA (recoger todo)
BUY_SOFT_SCORE_MIN=0            # gate de compra (tarde). Aunque pase IA, no compra si el “soft score” está por debajo.

# ╔════════════════════════════════════════════════════════════════════╗
# ║                 Perfil de filtros – Data Acquisition               ║
# ╚════════════════════════════════════════════════════════════════════╝
MAX_AGE_DAYS=1
MIN_AGE_MIN=0.2
MIN_LIQUIDITY_USD=1000        # ↓ umbral bajo para recopilar más muestras
MIN_VOL_USD_24H=5000          # ↓ volumen bajo
MAX_24H_VOLUME=80000000
MIN_MARKET_CAP_USD=5000
MAX_MARKET_CAP_USD=8000000
MIN_HOLDERS=0
MIN_SCORE_TOTAL=30            # filtro de descubrimiento (pruning temprano). Evita meter basura en la cola.

# DexScreener: actividad mínima reciente (si aplica)
DEXS_TXNS_5M_MIN=2

DEX_WHITELIST=raydium,orca,meteora,pumpswap
REQUIRE_POOL_INITIALIZED=true
BUY_RATE_LIMIT_N=20
BUY_RATE_LIMIT_WINDOW_S=120

# ╔════════════════════════════════════════════════════════════════════╗
# ║                      Política de precios / Compra                  ║
# ╚════════════════════════════════════════════════════════════════════╝
USE_JUPITER_PRICE=true         # Jupiter Price v3 (Lite) para precios
REQUIRE_JUPITER_FOR_BUY=false  # ← data acquisition: NO exigir Jupiter en compra
IMPACT_EST_K=2.0                # factor prudente para estimar impacto sin router Jupiter
PRICE_DIVERGENCE_MAX_PCT=15     # divergencia máx. DS vs Jupiter permitida antes de abortar compra

# Tamaños de compra y salvaguardas (paper trading ignora balance)
TRADE_AMOUNT_SOL=0.1
GAS_RESERVE_SOL=0.02
MIN_BUY_SOL=0.01
MIN_SOL_BALANCE=0.05
MAX_ACTIVE_POSITIONS=20

# ╔════════════════════════════════════════════════════════════════════╗
# ║                          Gestión de riesgo                         ║
# ╚════════════════════════════════════════════════════════════════════╝
# SL / TP / Trailing (perfil suave de acquisition para ver más curvas)
TAKE_PROFIT_PCT=25
STOP_LOSS_PCT=20
TRAILING_PCT=25
WIN_PCT=0.33
MAX_HOLDING_H=3
MAX_HARD_HOLD_H=4            # extensión “dura” si trailing en verde
LABEL_GRACE_H=2

# Kill-switches estandarizados
#EARLY_DROP_KILL_PCT=12       # cierre si cae ≥12% en ventana temprana
KILL_EARLY_DROP_PCT=12       # <-- usada por seller.py si está presente
EARLY_DROP_WINDOW_MIN=7
LIQ_CRUSH_DROP_PCT=35
LIQ_CRUSH_WINDOW_MIN=10
LIQ_CRUSH_ABS_FRACT=0.60
# Alternativa basada en fracción directa vs liq de entrada
KILL_LIQ_FRACTION=0.70

NO_EXPANSION_MAX_PCT=0.0        # cierre a 1h si pnl_pct ≤ este %, 0 = desactivado

# ╔════════════════════════════════════════════════════════════════════╗
# ║                      Price services (TTLs / caché)                 ║
# ╚════════════════════════════════════════════════════════════════════╝
# DexScreener
DEXS_TTL_NIL_SHORT=120
DEXS_TTL_NIL_MAX=300
DEXS_TTL_NIL=300

# GeckoTerminal
USE_GECKO_TERMINAL=true
GECKO_RATE_LIMIT=20
GECKO_TTL_NIL_SHORT=180
GECKO_TTL_NIL_MAX=900

# Birdeye
USE_BIRDEYE=true
BIRDEYE_RPM=20
BIRDEYE_TTL_NIL_SHORT=150
BIRDEYE_TTL_NIL_MAX=600

# Jupiter Price v3 (Lite)
JUPITER_PRICE_URL=https://lite-api.jup.ag/price/v3
JUPITER_RPM=60
JUPITER_TTL_NIL_SHORT=120
JUPITER_TTL_NIL_MAX=600
JUPITER_TTL_OK=120
JUPITER_VERBOSE=1

# ╔════════════════════════════════════════════════════════════════════╗
# ║                   Jupiter Quote v6 – impacto/slippage              ║
# ╚════════════════════════════════════════════════════════════════════╝
USE_JUPITER_IMPACT=true
IMPACT_PROBE_SOL=0.05         # sondeo de impacto con 0.05 SOL
IMPACT_MAX_PCT=8              # rechazar compra si impacto > 8%
JUP_QUOTE_URL=https://quote-api.jup.ag/v6/quote
JUP_QUOTE_TIMEOUT=6.0
JUP_QUOTE_SLIPPAGE_BPS=100    # 1% para la simulación de quote

# ╔════════════════════════════════════════════════════════════════════╗
# ║                        Pump.fun (stream)                            ║
# ╚════════════════════════════════════════════════════════════════════╝
PUMPFUN_LIMIT_RETURN=8
PUMPFUN_CACHE_TTL=6
PUMPFUN_BUFFER_MAX=200
PUMPFUN_WINDOW_MIN=8
PUMPFUN_PRICE_QUOTA=3
PUMPFUN_PRICE_QUOTA_WINDOW=10
PUMPFUN_PRICE_ATTEMPT_COOLDOWN=45
PUMPFUN_PROGRAM=

# ╔════════════════════════════════════════════════════════════════════╗
# ║                     Opcionales / Extras                            ║
# ╚════════════════════════════════════════════════════════════════════╝
# KILL_EARLY_WINDOW_S=600         # alternativa en segundos para ventana early-drop (600s = 10 min)
